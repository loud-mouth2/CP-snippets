<snippet>
	<content><![CDATA[
const int MAXN = 1e5+5;


inline int64_t gilbertOrder(int x, int y, int pow, int rotate) {
    if (pow == 0) {
        return 0;
    }
    int hpow = 1 << (pow-1);
    int seg = (x < hpow) ? (
        (y < hpow) ? 0 : 3
    ) : (
        (y < hpow) ? 1 : 2
    );
    seg = (seg + rotate) & 3;
    const int rotateDelta[4] = {3, 0, 0, 1};
    int nx = x & (x ^ hpow), ny = y & (y ^ hpow);
    int nrot = (rotate + rotateDelta[seg]) & 3;
    int64_t subSquareSize = int64_t(1) << (2*pow - 2);
    int64_t ans = seg * subSquareSize;
    int64_t add = gilbertOrder(nx, ny, pow-1, nrot);
    ans += (seg == 1 || seg == 2) ? add : (subSquareSize - add - 1);
    return ans;
}

struct node{
    int l,r,idx;
    int64_t ord;
    inline void calcOrder() {
        ord = gilbertOrder(l, r, 21, 0);
    }
}Q[MAXN];

inline bool operator<(const node &a, const node &b) {
    return a.ord < b.ord;
}

inline void add(int i,int &ans)
{
    
}
inline void del(int i,int &ans)
{

}

void MO(int q)
{
    // int BLOCK=max((int)(q/sqrt(q)),1LL);
    sort(Q,Q+q);   //,[&](node &a,node &b){if(a.l/BLOCK==b.l/BLOCK)return a.r<b.r;return a.l/BLOCK<b.l/BLOCK;}
    int ans=0,curL=0,curR=-1;
    for(int i=0;i<q;++i)
    {
        //cout<<Q[i].idx<<" "<<Q[i].l<<" "<<Q[i].r<<endl;
        while(curR<Q[i].r)add(++curR,ans);
        while(curL>Q[i].l)add(--curL,ans);
        while(curR>Q[i].r)del(curR--,ans);
        while(curL<Q[i].l)del(curL++,ans);
    }
}

]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>mos algorithm</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
