<snippet>
	<content><![CDATA[
const int N=1e5+5, K = 1+ (int)(log2(N));
struct node{
	int sum,mx,mn;
	void assign(int v){ sum=mx=mn=v; }
	void merge(node &l, node &r)
	{
		mx=max(l.mx,r.mx);
		mn=min(l.mn,r.mn);
		sum=l.sum+r.sum;
	}
}zero;

struct sparsetable{
public:
	node st[N][K];
	long long n, k, sum_ans;
	long long log[N+1];

	void build(int a[], int n)
	{
		log[1] = 0;
		for (int i = 2; i <= N; i++)
		    log[i] = log[i/2] + 1;

		k = log2(n)+1;
		for (int i = 0; i < n; i++)
   			st[i][0].assign(a[i]);

   		for (int j = 1; j <= k; j++)
    		for (int i = 0; i + (1 << j) <= n; i++)
        		st[i][j].merge(st[i][j-1], st[i + (1 << (j - 1))][j - 1]);
	}
	void build(vector<long long>& a)
	{
		log[1] = 0;
		for (int i = 2; i <= N; i++)
		    log[i] = log[i/2] + 1;

		n = (long long)a.size();
		k = log2(n)+1;
		for (int i = 0; i < n; i++)
   			st[i][0].assign(a[i]);

   		for (int j = 1; j <= k; j++)
    		for (int i = 0; i + (1 << j) <= n; i++)
        		st[i][j].merge(st[i][j-1], st[i + (1 << (j - 1))][j - 1]);
	}

	long long sum_query(int L, int R)
	{
		sum_ans = 0;
		for (int j = k; j >= 0; j--) {
		    if ((1 << j) <= R - L + 1) {
		        sum_ans += st[L][j].sum;
		        L += 1 << j;
		    }
		}
		return sum_ans;
	}

	long long min_query(int L, int R)
	{
		long long j = log[R - L + 1];
		long long minimum = min(st[L][j].mn, st[R - (1 << j) + 1][j].mn);
		return minimum;
	}

	long long max_query(int L, int R)
	{
		long long j = log[R - L + 1];
		long long maximum = max(st[L][j].mx, st[R - (1 << j) + 1][j].mx);
		return maximum;
	}

}st;
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>sparsetable</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
